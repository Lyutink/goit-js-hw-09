{"version":3,"sources":["js/03-promises.js"],"names":["formRef","document","querySelector","btnCreatePromisesRef","firstDelay","step","amount","acceptData","event","preventDefault","Number","value","console","log","createPromise","delay","i","Promise","resolve","setTimeout","then","addEventListener"],"mappings":";AAAA,MAAMA,EAAUC,SAASC,cAAc,SACjCC,EAAuBF,SAASC,cAAc,kBAQpD,IAAIE,EAAa,EACbC,EAAO,EACPC,EAAS,EAIb,SAASC,EAAWC,GAClBA,EAAMC,iBAKNL,EAAaM,OAAQV,EAAO,MAAUW,OAEtCN,EAAOK,OAAQV,EAAO,KAASW,OAC/BL,EAASI,OAAQV,EAAO,OAAWW,OACnCC,QAAQC,IAAIT,GACZQ,QAAQC,IAAIR,GACZO,QAAQC,IAAIP,GACZQ,EAAcV,EAAYC,EAAMC,GAalC,SAASQ,EAAcV,EAAYC,EAAMC,GACnCS,IAAAA,EAAQX,EACZQ,QAAQC,IAAI,QAAQE,GACf,IAAA,IAAIC,EAAI,EAAGA,GAAKV,EAAQU,GAAK,EAC9BC,IAAAA,QAAQC,IACVC,WAAW,IAAMD,EAAQF,GAAID,KAC5BK,KAAKT,GAASC,QAAQC,yBAAyBF,QAAYI,MAC5DA,GAASV,EACTO,QAAQC,IAAI,QAAQE,GApCxBZ,EAAqBkB,iBAAiB,QAASd","file":"03-promises.552871a0.js","sourceRoot":"../src","sourcesContent":["const formRef = document.querySelector('.form');\nconst btnCreatePromisesRef = document.querySelector('.form > button');\n\n\n\n//console.log(formRef.step);\n//console.log(inputDelayRef);\n\n//let delay = 0;\nlet firstDelay = 0;\nlet step = 0;\nlet amount = 0;\n\nbtnCreatePromisesRef.addEventListener('click', acceptData);\n\nfunction acceptData(event) {\n  event.preventDefault();\n  // const formData = new FormData(formRef);\n  // formData.forEach((value, name) => {\n    \n  //   console.log(value, name)\n  firstDelay = Number((formRef['delay'].value));\n  //delay = firstDelay;\n  step = Number((formRef['step'].value));\n  amount = Number((formRef['amount'].value));\n  console.log(firstDelay);\n  console.log(step);\n  console.log(amount);\n  createPromise(firstDelay, step, amount);\n}\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\nfunction createPromise(firstDelay, step, amount) {\n  let delay = firstDelay;\n  console.log('hhhhh',delay);\n  for (let i = 1; i <= amount; i += 1) {\n  new Promise(resolve => {\n    setTimeout(() => resolve(i), delay);\n  }).then(value => console.log(`Fulfilled promise ${value} in ${delay}`));\n    delay += step;\n    console.log('hhhhh',delay);\n}\n}\n// const firstDelay = 1000;\n// let delay = firstDelay;\n// for (let i = 0; i < 3; i += 1) {\n//   new Promise(resolve => {\n//     setTimeout(() => resolve(i), delay);\n//   }).then(value => console.log(value));\n//   delay += step;\n// }"]}